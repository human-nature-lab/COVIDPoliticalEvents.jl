
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # setup for imai analysis (and plotting)
> 
> # use PanelMatch
> # redo with ALL data
> # include data from whole time period,
> # mark primary range for each state
> library("lubridate")

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library("tibble")
> library("ggplot2")
> library("dplyr")

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library("magrittr")
> 
> # change to covid-19-data
> setwd("..")
> 
> source("scripts/data_manage.R")
> source("../covid-19-voting/changes-in-changes/imai_functions.R")
> 
> ckey <- tidycensus::census_api_key("cce71ee05f76abac6fd8d781512c42160b0bf4f9")
To install your API key for use in future sessions, run this function with `install = TRUE`.
> 
> fips_key <- tidycensus::fips_codes %>%
+   mutate(fips = as.integer(state_code) * 1000 + as.integer(county_code)) %>%
+   select(state_name, fips, county) %>%
+   tibble()
> 
> # grab the data
> dat <- data_manage(
+   load_existing_covid = FALSE,
+   load_existing_mb = TRUE,
+   user = "",
+   private_key = "",
+   census_key = ckey,
+   weekly_data = FALSE,
+   county_data = TRUE)

── Column specification ────────────────────────────────────────────────────────
cols(
  date = col_date(format = ""),
  state = col_character()
)


── Column specification ────────────────────────────────────────────────────────
cols(
  abbr = col_character(),
  state = col_character(),
  first_loosening = col_date(format = ""),
  stay_at_home_expired = col_date(format = ""),
  schools_opened = col_date(format = ""),
  bars_restau_opened = col_date(format = ""),
  retail_opened = col_date(format = ""),
  regional_reopen = col_logical(),
  sources = col_character()
)


── Column specification ────────────────────────────────────────────────────────
cols(
  State = col_character(),
  StateOfEmer = col_date(format = ""),
  StayAtHome = col_date(format = ""),
  Advisory = col_double(),
  GatherLim = col_double(),
  `Out-of-stateTravel` = col_character(),
  Schools = col_character(),
  Daycares = col_character(),
  `Bars&sit-down restaurants` = col_character(),
  `Non-essentialRetail` = col_character(),
  Sources = col_character()
)

Your original .Renviron will be backed up and stored in your R HOME directory if needed.
Your API key has been stored in your .Renviron and can be accessed by Sys.getenv("CENSUS_API_KEY"). 
To use now, restart R or run `readRenviron("~/.Renviron")`
Getting data from the 2014-2018 5-year ACS

── Column specification ────────────────────────────────────────────────────────
cols(
  stateFIPS = col_double(),
  countyFIPS = col_double(),
  county = col_character(),
  Year = col_double(),
  LF = col_number(),
  Employed = col_number(),
  Unemployed = col_number(),
  Urate = col_double()
)


── Column specification ────────────────────────────────────────────────────────
cols(
  COUNTYFP = col_character(),
  NEVER = col_double(),
  RARELY = col_double(),
  SOMETIMES = col_double(),
  FREQUENTLY = col_double(),
  ALWAYS = col_double()
)


── Column specification ────────────────────────────────────────────────────────
cols(
  cbsa_code = col_double(),
  metro_code = col_double(),
  csa_code = col_double(),
  cbsa_name = col_character(),
  area_type = col_character(),
  metro_name = col_character(),
  csa_name = col_character(),
  county = col_character(),
  state = col_character(),
  fips_state = col_character(),
  fips_county = col_character(),
  county_type = col_character()
)


── Column specification ────────────────────────────────────────────────────────
cols(
  fips = col_double(),
  county = col_character(),
  state = col_character(),
  date = col_date(format = ""),
  poll_places = col_character(),
  voter_per_poll = col_double(),
  tot_reg = col_double(),
  tot_ear = col_double(),
  tot_abs_in_person = col_logical(),
  tot_abs_mail = col_double(),
  tot_abs = col_double(),
  tot_grace = col_logical(),
  tot_failsafe = col_logical(),
  tot_prov = col_double(),
  tot_prov_failsafe = col_double(),
  tot = col_double(),
  caucus = col_double(),
  source = col_character(),
  notes = col_character()
)

Warning: 339 parsing failures.
 row               col           expected actual                                         file
1214 tot_abs_in_person 1/0/T/F/TRUE/FALSE   13   'data/2020_presidential_primary_turnout.csv'
1215 tot_abs_in_person 1/0/T/F/TRUE/FALSE   53   'data/2020_presidential_primary_turnout.csv'
1216 tot_abs_in_person 1/0/T/F/TRUE/FALSE   119  'data/2020_presidential_primary_turnout.csv'
1217 tot_abs_in_person 1/0/T/F/TRUE/FALSE   47   'data/2020_presidential_primary_turnout.csv'
1218 tot_abs_in_person 1/0/T/F/TRUE/FALSE   1157 'data/2020_presidential_primary_turnout.csv'
.... ................. .................. ...... ............................................
See problems(...) for more details.


── Column specification ────────────────────────────────────────────────────────
cols(
  FIPS = col_character(),
  State = col_character(),
  County_Name = col_character(),
  Population_2010 = col_number(),
  RUCC_2013 = col_double(),
  Description = col_character()
)

> 
> # load the data
> # load("../data/covid_voting_data_daily_county.Rdat")
> df <- dat$time_df
> s_df <- dat$ste_df
> cty_df <- dat$cty_df
> 
> # incubation period and onset-to-death distribution
> # incub : 5.1,0.86; death : 17.8, 0.45
> death_time_p_tiles <- 
+   EnvStats::qgammaAlt(
+     c(.2, 0.5, 0.8), 5.1, cv = 0.86, lower.tail = TRUE, log.p = FALSE) +
+   EnvStats::qgammaAlt(
+     c(.2, 0.5, 0.8), 17.8, cv = 0.45, lower.tail = TRUE, log.p = FALSE)
> 
> death_window <- round(death_time_p_tiles, 0)
> 
> # for ease, remove negative counts
> # we need to trace down the corrections
> df$deaths[df$deaths < 0] <- 0
> 
> # remove irrelevant places
> nix <- c(
+   "Puerto Rico", "Northern Mariana Islands", "Virgin Islands",
+   "American Samoa", "U.S. Virgin Islands", "Guam")
> 
> df %<>% filter(state %in% setdiff(unique(df$state), nix))
> cty_df %<>% filter(state %in% setdiff(unique(df$state), nix))
> s_df %<>% filter(state %in% setdiff(unique(df$state), nix))
> 
> # primary indicator variables
> # excludes mail-in-only states
> mail_only <- c(
+     "Colorado", "Washington", "Hawaii", 
+     "Wyoming", "Kansas", "Ohio", 
+     "Alaska", "Oregon", "Utah")
> 
> # exclude before-COVID states
> other_exclude <- c(
+   "Iowa", "New Hampshire",
+   "South Carolina", "Nevada")
> 
> exclude <- c(mail_only, other_exclude)
> 
> # we need to translate each rel s_df col into a time-running
> # indicator in df, matching the actual days
> 
> df <- indicator_mk(
+   s_df,
+   df,
+   delay = 10, # primary_period
+   window_open = 13,
+   window_close = 32,
+   exclude)
> 
> # set origin date in data
> orig <- as.Date("2020-03-01")
> df$running <- as.integer(df$date - orig)
> 
> df <- other_indicators(df, orig)
There were 50 or more warnings (use warnings() to see the first 50)
> 
> # bring in county level characteristics
> sel_char <- cty_df %>%
+   select(-county, -state)
> 
> df <- df %>% left_join(sel_char, by = "fips")
> 
> # apply filtering, calculate rates
> 
> dF <- df %>%
+   mutate(
+     median_inc_ln = log(median_inc),
+     pop_ln = log(pop))
>   # filter(
>   #   date >= "2020-03-01",
>   #   date <= "2020-10-01")
> dF <- dF %>% tidyr::drop_na(deaths) # this seems to change the matches?
> 
> # put the rate scale on deaths per 1000 people
> # for visual clarity and interpretability
> scale_mult <- 1000
> 
> dFr <- dF %>%
+   mutate(
+     death_rte = (deaths / pop) * scale_mult,
+     case_rte = (cases / pop) * scale_mult,
+     cum_death_rte = (deathsCum / pop) * scale_mult,
+     cum_case_rte = (casesCum / pop) * scale_mult)
> 
> # # turnout quantiles
> # trn_quant <- quantile(cty_df$trn_rte, na.rm = TRUE)
> 
> # # ruc quant
> # ruc_quant <- quantile(as.integer(cty_df$ruc), na.rm = TRUE)
> 
> # # pop density quant
> # pop_density_quant <- quantile(cty_df$pop_density, na.rm = TRUE)
> 
> # cty_quant <- list(
> #   trn = trn_quant,
> #   ruc = ruc_quant,
> #   pop_density = pop_density_quant)
> 
> # manual changes
> dFr <- filter(dFr, state != "Alaska", state != "Hawaii")
> 
> dFr %>% select(
+   cum_death_rte, first_case,
+   pop_density, black, hispanic, trump_share_2016,
+   bacc, perc_65_up, Urate, median_inc_ln) %>%
+   mutate_all(is.na) %>%
+   colSums()
   cum_death_rte       first_case      pop_density            black 
               0                0                0                0 
        hispanic trump_share_2016             bacc       perc_65_up 
               0              330                0                0 
           Urate    median_inc_ln 
               0              519 
> 
> tmiss <- unique(dFr$fips[is.na(dFr$trump_share_2016)])
> # SD County Oglala Lakota Co. 41602 -> 0.083
> dFr$trump_share_2016[dFr$fips == tmiss] <- 0.083
> 
> mmiss <- unique(dFr$fips[is.na(dFr$median_inc_ln)])
> # Rio Arriba Co, NM (from st. louis fed) 35039 -> log(41511)
> # Dagget Co, Utah 49009 -> log(81250)
> dFr$median_inc_ln[dFr$fips == mmiss[1]] <- log(41511)
> dFr$median_inc_ln[dFr$fips == mmiss[2]] <- log(81250)
> 
> # add other datasets
> 
> # trump rallies
> rally <- readr::read_csv("data/trump_rallies.csv")

── Column specification ────────────────────────────────────────────────────────
cols(
  date = col_date(format = ""),
  city = col_character(),
  state = col_character(),
  fips = col_double(),
  zip = col_double(),
  address = col_character(),
  venue = col_character(),
  speakers = col_character()
)

> rally <- select(rally, -speakers, -state)
> rally$rallyday <- 1
> 
> dFr <- left_join(dFr, rally, by = c("date", "fips"))
> dFr$rallyday[is.na(dFr$rallyday)] <- 0
> 
> save(
+   dFr,
+   # df,
+   # cty_df,
+   # s_df,
+   # mail_only,
+   # other_exclude,
+   # death_time_p_tiles,
+   # death_window,
+   # cty_quant,
+   file = "data/setup_data.RData")
> 
> readr::write_csv(dFr, file = "data/setup_data.csv")
> 
> proc.time()
   user  system elapsed 
187.494  24.817 229.054 
